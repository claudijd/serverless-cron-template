service: http-observatory-cron

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:PutObject"
       - "s3:PutObjectAcl"
     Resource: 
      Fn::Join:
        - ""
        - - Fn::GetAtt:
            - S3BucketObservatoryResults
            - Arn
          - "/*"

functions:
  cron:
    handler: handler.run
    events:
      # Invoke Lambda function every minute
      - schedule: rate(1 minute)
      - s3:
        bucket: ${self:custom.cfg.s3BucketName}
        event: s3:ObjectCreated:*
    alarms: 
      - functionErrors
      - HTTPObsDownAlarm
      - functionThrottles

resources:
  Resources:
    S3BucketObservatoryResults:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.cfg.s3BucketName}

plugins:
  - serverless-plugin-aws-alerts
  - serverless-python-requirements

custom:
  alerts:
    # stages:
      # - production
      # - dev
    topics:
      alarm:
        topic: ${self:service}-httpobs-exception-alarm
        notifications:
          - protocol: email
            endpoint: culucenk@mozilla.com # Change this to your email address
    definitions:
      HTTPObsDownAlarm:
        description: 'HTTP Observatory is down'
        namespace: 'AWS/Lambda'
        metric: HTTPObsDownException
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        # This will catch if lambdas are logging in JSON format, like: {"level":"ERROR","message":"some message"}
        pattern: '{ $.level = "ERROR" }'
        # For this to work, we need to create a custom CloudWatch metric 
        # pattern: 'HTTPObs exception'
    alarms:
      - functionErrors
      - functionThrottles
      - HTTPObsDownAlarm
  cfg:
    s3BucketName: "observatoryresults3"
  pythonRequirements:
    dockerizePip: non-linux